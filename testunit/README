BRIEF

TestRunner - engine for write and execute unit tests on Lua and C++ languages (some other languages support in future) from script on Lua.


CHANGES

version 0.1.0 2009-09-08

First release. 
Compiled and testes on Windows XP and Ubuntu 9.04.


TODO

version 0.1.0 2009-09-08

Choose usecase for run set of only needed unit tests.


AUTHOR

Efimov Ivan aka MuteSpirit
e-mail: mutespirit@gmail.com


DESCRIPTION

TestRunner is engine, which now contain three part:
1. lua_unit (Analog of lunit engine (http://luaforge.net/projects/lunit/))
2. cpp_unit (Analog of MiniCppUnit (http://sourceforge.net/projects/minicppunit/))
3. test_runner (Code for harvest and execute unit test from Lua and C++ test drivers)

lunit is used for testing of Lua part of TestRunner code.

There are three unterested for users essences at lua_unit and cpp_unit:
- TestFixture contain 'setUp' and 'tearDown' interface functions;
- TestCase, which are derived from TestFixture and also has 'test' function, namely TestCase is one unit of tests for execution;
- TestSuite is set of unit tests. it may contain several TestCases

Lua tests must be written at *.t.lua files (see lua_test_sample.t.lua), and C++ unit test driver must be builded into *.t.dll (or *.t.so for Unix) files (see cppunit.t.vcproj and cppunit.t.cbp projects).

Script of 'main' function of current package is exec_test.lua, witch execute all needed Lua and C++ tests of package.

The simplest test file on C++   looks like:
///////////////////////////////////////////////////////////////////////////////
#if defined(TS_TEST) 

#include "test.h"

TEST_SUITE(EmptyTestSuite)
{
	TEST_CASE(emptyTest)
	TEST_CASE_END
};

#endif // defined(TS_TEST)
///////////////////////////////////////////////////////////////////////////////

Guard macro TS_TEST is needed for remove test code from release of program.

The simplest test file on Lua looks like:
-------------------------------------------------------------------------------
local luaUnit = require("lua_unit");

module("lua_test_sample", luaUnit.testmodule, package.seeall);

TEST_SUITE("EmptyTestSuite")
{
    TEST_CASE{"EmptyTest", function(self)
    end
    };
};
-------------------------------------------------------------------------------


TestRunner provide own sintax of test writing, for example:
Lua:
-------------------------------------------------------------------------------
TEST_FIXTURE("SampleFixture")
{
    setUp = function(self)
        self.q_.initialize();
    end
    ;
    tearDown = function(self)
        self.q_.release();
    end
    ;
    q_ = 
    {
        initialize = function() end;
        release = function() end;
        add = 
            function(self, value)
                table.insert(self.list, value);
                if self.list[#self.list] then
                    return true;
                end
            end;
        list = {};
    };
};


TEST_SUITE("SampleTestSuite")
{
    // Define table 'SimpleTest', derived from TestCase
    TEST_CASE{"SimpleTest", function(self)
        local q = 2;
        ASSERT_EQUAL(4, q + 2);
    end
    };

    // Define class 'AddTest', derived from TestCase and test fixture 'SampleFixture'
    TEST_CASE_EX{"AddTest", "SampleFixture", function(self)
        ASSERT_TRUE(self.q_:add(""));
    end
    };
};

C++:
///////////////////////////////////////////////////////////////////////////////
TEST_FIXTURE(SetUpCallCheckFixture)
{
    SETUP
	{
		setUpCall_ = true;
	}

    TEARDOWN
	{
		setUpCall_ = false;
	}
protected:
	bool setUpCall_;
};

TEST_SUITE(SampleTestSuite)
{
    // Define class 'TestEqualAssert', derived from TestCase
	TEST_CASE(TestEqualAssert)
		ASSERT_EQUAL(1, 1);
		ASSERT_EQUAL(0, 0);
		ASSERT_EQUAL(-1, -1);
	TEST_CASE_END

    // Define class 'TestCheckSetUpCall', derived from TestCase and test fixture 'SetUpCallCheckFixture'
	TEST_CASE_EX(TestCheckSetUpCall, SetUpCallCheckFixture)
		ASSERT(setUpCall_);
	TEST_CASE_END
};


You may use such check macro:
    at C++ tests:
        ASSERT(condition)
        ASSERT_EQUAL(expected, actual)
        ASSERT_DOUBLES_EQUAL(expected, actual, delta)
        ASSERT_THROW(expression, exceptionType)
        ASSERT_NO_THROW(expression)
    at Lua tests:
        ASSERT(assertion)
        ASSERT_TRUE(actual)
        ASSERT_FALSE(actual)
        ASSERT_THROW(functionForRun, ...)
        ASSERT_NO_THROW(functionForRun, ...)
        ASSERT_EQUAL(expected, actual)
        ASSERT_NOT_EQUAL(expected, actual)
        ASSERT_NIL(variable)
        ASSERT_BOOLEAN(variable)
        ASSERT_NUMBER(variable)
        ASSERT_STRING(variable)
        ASSERT_TABLE(variable)
        ASSERT_FUNCTION(variable)
        ASSERT_THREAD(variable)
        ASSERT_USERDATA(variable)
        ASSERT_NOT_NIL(variable)
        ASSERT_NOT_BOOLEAN(variable)
        ASSERT_NOT_NUMBER(variable)
        ASSERT_NOT_STRING(variable)
        ASSERT_NOT_TABLE(variable)
        ASSERT_NOT_FUNCTION(variable)
        ASSERT_NOT_THREAD(variable)
        ASSERT_NOT_USERDATA(variable)
    


COPYRIGHT

Published under BSD License (see file LICENSE)